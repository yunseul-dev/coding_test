/**회의실 배정
 * B개의 회의실의 시작 시간, 종료 시간이 주어질 때, 회의가 겹치지 않게 하면서 회의를 할 수 있는 최대 개수를 찾아보자.
 * (회의의 시작 시간과 끝나는 시간이 같으면 끝나자마자 시작하는 것으로 간주)
 */

let N = 11;
let arr = [
  [1, 4],
  [3, 5],
  [0, 6],
  [5, 7],
  [3, 8],
  [5, 9],
  [6, 10],
  [8, 11],
  [8, 12],
  [2, 13],
  [12, 14],
];

// 회의 정렬 순서
// 1. 먼저 끝나는 회의 순서대로
// 2. 끝나는 회의 순서가 같다면, 먼저 시작하는 회의 순서
arr.sort((a, b) => a[1] - b[1] || a[0] - b[0]);

let count = 0;
let endTime = 0;

arr.forEach(([start, end]) => {
  // 시작 시간이 최근 마친 시간보다 빠르면 return 무시
  if (start < endTime) {
    return;
  }

  count++;
  endTime = end;
});

console.log(count);
